import { supabase } from '../lib/supabase';
import type { Tables, Inserts, Updates } from '../lib/supabase';

// User service
export const userService = {
  async createUser(userData: Inserts<'users'>) {
    const { data, error } = await supabase
      .from('users')
      .insert(userData)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async getUser(userId: string) {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) throw error;
    return data;
  },

  async updateUser(userId: string, updates: Updates<'users'>) {
    const { data, error } = await supabase
      .from('users')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', userId)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
};

// Lesson service
export const lessonService = {
  async getLessons(filters?: { subject?: string; difficulty?: string; limit?: number }) {
    let query = supabase
      .from('lessons')
      .select('*')
      .order('created_at', { ascending: false });

    if (filters?.subject) {
      query = query.eq('subject', filters.subject);
    }
    
    if (filters?.difficulty) {
      query = query.eq('difficulty', filters.difficulty);
    }
    
    if (filters?.limit) {
      query = query.limit(filters.limit);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data;
  },

  async getLesson(lessonId: string) {
    const { data, error } = await supabase
      .from('lessons')
      .select('*')
      .eq('id', lessonId)
      .single();
    
    if (error) throw error;
    return data;
  },

  async createLesson(lessonData: Inserts<'lessons'>) {
    const { data, error } = await supabase
      .from('lessons')
      .insert(lessonData)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
};

// Progress service
export const progressService = {
  async getUserProgress(userId: string, lessonId?: string) {
    let query = supabase
      .from('user_progress')
      .select(`
        *,
        lessons (
          id,
          title,
          subject,
          difficulty
        )
      `)
      .eq('user_id', userId);

    if (lessonId) {
      query = query.eq('lesson_id', lessonId);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data;
  },

  async updateProgress(userId: string, lessonId: string, progressData: Omit<Inserts<'user_progress'>, 'user_id' | 'lesson_id'>) {
    const { data, error } = await supabase
      .from('user_progress')
      .upsert({
        user_id: userId,
        lesson_id: lessonId,
        ...progressData,
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
};

// QA service
export const qaService = {
  async getQAHistory(userId: string, limit = 50) {
    const { data, error } = await supabase
      .from('qa_history')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) throw error;
    return data;
  },

  async createQAEntry(qaData: Inserts<'qa_history'>) {
    const { data, error } = await supabase
      .from('qa_history')
      .insert(qaData)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  }
};

// AI service for generating responses (mock for now)
export const aiService = {
  async generateAnswer(question: string, context?: string, lessonId?: string): Promise<string> {
    // This is a mock AI response since we don't have access to OpenAI API
    // In a real implementation, this would call OpenAI or another AI service
    
    const responses = [
      `Based on your question "${question}", here's a comprehensive explanation:

This is a detailed response that would normally be generated by an AI model. The AI would analyze your question and provide relevant, educational content.

Key points to consider:
• Understanding the fundamental concepts
• Practical applications and examples
• Common misconceptions to avoid
• Next steps for deeper learning

${context ? `Given the additional context you provided: "${context}", the response would be more tailored and specific.` : ''}

${lessonId ? 'This response takes into account the current lesson context to provide more relevant information.' : ''}`,

      `Great question! Let me break this down for you:

${question}

This is an important topic that many students find challenging. Here's how I would explain it:

1. **Foundation**: Start with the basic principles
2. **Application**: See how it works in practice  
3. **Examples**: Real-world scenarios where this applies
4. **Practice**: Ways to reinforce your understanding

The key is to approach this step by step and not rush through the concepts.`,

      `Excellent question about "${question}"!

This touches on several important concepts that are worth exploring:

**Core Concept**: The fundamental idea here is...
**Why It Matters**: This is important because...
**Common Applications**: You'll see this used in...
**Tips for Understanding**: To better grasp this concept...

Remember, learning is a process, and it's perfectly normal to need multiple explanations before everything clicks!`
    ];

    // Simulate AI processing time
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
    
    return responses[Math.floor(Math.random() * responses.length)];
  }
};